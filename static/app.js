// Generated by CoffeeScript 1.4.0
(function() {
  var AppView, Card, CardCollection, CardView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Card = (function(_super) {

    __extends(Card, _super);

    function Card() {
      return Card.__super__.constructor.apply(this, arguments);
    }

    Card.prototype.defaults = {
      title: "",
      source: "",
      body: "",
      page: "",
      date: new Date().valueOf()
    };

    return Card;

  })(Backbone.Model);

  CardCollection = (function(_super) {

    __extends(CardCollection, _super);

    function CardCollection() {
      return CardCollection.__super__.constructor.apply(this, arguments);
    }

    CardCollection.prototype.model = Card;

    CardCollection.prototype.localStorage = new Backbone.LocalStorage("cards");

    CardCollection.prototype.comparator = function(model) {
      return model.get('date');
    };

    return CardCollection;

  })(Backbone.Collection);

  CardView = (function(_super) {

    __extends(CardView, _super);

    function CardView() {
      return CardView.__super__.constructor.apply(this, arguments);
    }

    CardView.prototype.el = $("#card");

    CardView.prototype.template = Hogan.compile($("#card-template").html());

    CardView.prototype.events = {
      "keyup :input": "autoSave"
    };

    CardView.prototype.use = function(model) {
      this.model = model;
      return this.render();
    };

    CardView.prototype.render = function() {
      return this.$el.html(this.template.render(this.model.toJSON()));
    };

    CardView.prototype.autoSave = _.throttle(function() {
      return this.save();
    }, 1500);

    CardView.prototype.save = function() {
      return this.model.save({
        title: this.$(".card-title").val(),
        source: this.$(".card-source").val(),
        body: this.$(".card-body").val(),
        page: this.$(".card-page").val()
      });
    };

    CardView.prototype.isBlank = function() {
      return Boolean(this.$(".card-title").val() || this.$(".card-source").val() || this.$(".card-body").val() || this.$(".card-page").val());
    };

    return CardView;

  })(Backbone.View);

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $("body");

    AppView.prototype.events = {
      "click #btn-prev": "previousCard",
      "click #btn-next": "nextCard",
      "click #btn-print": "print",
      "click #btn-add": "addCard",
      "click #btn-delete": "deleteCard"
    };

    AppView.prototype.initialize = function() {
      var _this = this;
      this.cards = new CardCollection;
      this.card_view = new CardView;
      window.onunload = function() {
        _this.card_view.save();
        return true;
      };
      this.cards.fetch();
      if (this.cards.length > 0) {
        return this.loadCard(this.cards.last());
      } else {
        return this.addCard();
      }
    };

    AppView.prototype.previousCard = function() {
      var current;
      current = this.cards.indexOf(this.card_view.model);
      return this.loadCard(this.cards.at(current - 1));
    };

    AppView.prototype.nextCard = function() {
      var current;
      current = this.cards.indexOf(this.card_view.model);
      return this.loadCard(this.cards.at(current + 1));
    };

    AppView.prototype.loadCard = function(model) {
      this.card_view.use(model);
      return this.updateCount();
    };

    AppView.prototype.addCard = function() {
      if (this.cards.length) {
        this.card_view.save();
      }
      return this.loadCard(this.cards.create());
    };

    AppView.prototype.deleteCard = function() {
      var position;
      if (!(!this.card_view.isBlank() || confirm("Are you SURE?"))) {
        return;
      }
      position = this.cards.indexOf(this.card_view.model);
      if (position === 0) {
        position = 1;
      }
      this.card_view.model.destroy();
      this.cards.sort();
      if (this.cards.length > 0) {
        return this.loadCard(this.cards.at(position - 1));
      } else {
        return this.addCard();
      }
    };

    AppView.prototype.updateCount = function() {
      var current, total;
      current = this.cards.indexOf(this.card_view.model) + 1;
      total = this.cards.length;
      $("#count").text("Card " + current + "/" + total);
      if (current === total) {
        $("#btn-next").addClass("arrow-disabled");
      } else {
        $("#btn-next").removeClass("arrow-disabled");
      }
      if (current === 1) {
        return $("#btn-prev").addClass("arrow-disabled");
      } else {
        return $("#btn-prev").removeClass("arrow-disabled");
      }
    };

    AppView.prototype.print = function() {
      var BODY_LINES, BUF_SIZE, R_HEIGHT, R_WIDTH, X_POS, Y_POS, card, cards_to_do, doc, i, j, p, _i, _j, _k, _l, _len, _ref;
      this.card_view.save();
      doc = new jsPDF();
      cards_to_do = this.cards.toArray();
      for (_i = 0, _len = cards_to_do.length; _i < _len; _i++) {
        card = cards_to_do[_i];
        if (!card.get('title') || !card.get('body')) {
          cards_to_do = _.without(cards_to_do, card);
        }
      }
      for (p = _j = 0, _ref = cards_to_do.length / 8; 0 <= _ref ? _j <= _ref : _j >= _ref; p = 0 <= _ref ? ++_j : --_j) {
        X_POS = 10;
        Y_POS = 10;
        R_WIDTH = 90;
        R_HEIGHT = 60;
        BUF_SIZE = 10;
        for (i = _k = 0; _k <= 3; i = ++_k) {
          for (j = _l = 0; _l <= 1; j = ++_l) {
            card = cards_to_do.pop();
            if (!card) {
              return doc.save('notes.pdf');
            }
            doc.setFontSize(15);
            doc.rect(X_POS, Y_POS, R_WIDTH, R_HEIGHT);
            doc.setFontStyle("bold");
            doc.text(card.get('title'), X_POS + 2, Y_POS + 6);
            doc.setFontStyle("normal");
            doc.text(card.get('source'), X_POS + R_WIDTH - 6, Y_POS + 6);
            doc.setFontSize(12);
            BODY_LINES = doc.splitTextToSize(card.get('body'), 190);
            doc.text(BODY_LINES, X_POS + 2, Y_POS + 15);
            doc.lines([[2, 0], [R_WIDTH - 2, 0]], X_POS, Y_POS + 8);
            doc.text(card.get('page'), X_POS + R_WIDTH - 9, Y_POS + R_HEIGHT - 2);
            X_POS = R_WIDTH + 20;
          }
          X_POS = 10;
          Y_POS += R_HEIGHT + BUF_SIZE;
        }
        doc.addPage();
      }
    };

    return AppView;

  })(Backbone.View);

  window.app = new AppView;

}).call(this);
