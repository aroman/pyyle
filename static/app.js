// Generated by CoffeeScript 1.4.0
(function() {
  var AppView, Card, CardCollection, CardView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Card = (function(_super) {

    __extends(Card, _super);

    function Card() {
      return Card.__super__.constructor.apply(this, arguments);
    }

    return Card;

  })(Backbone.Model);

  CardCollection = (function(_super) {

    __extends(CardCollection, _super);

    function CardCollection() {
      return CardCollection.__super__.constructor.apply(this, arguments);
    }

    CardCollection.prototype.model = Card;

    CardCollection.prototype.localStorage = new Backbone.LocalStorage("cards");

    return CardCollection;

  })(Backbone.Collection);

  CardView = (function(_super) {

    __extends(CardView, _super);

    function CardView() {
      return CardView.__super__.constructor.apply(this, arguments);
    }

    CardView.prototype.el = $("#card");

    CardView.prototype.template = Hogan.compile($("#card-template").html());

    CardView.prototype.use = function(model) {
      this.model = model;
      return this.render();
    };

    CardView.prototype.render = function() {
      console.log("Rendering CardView!");
      return this.$el.html(this.template.render(this.model.toJSON()));
    };

    CardView.prototype.save = function() {
      return this.model.save({
        title: this.$(".card-title").val(),
        source: this.$(".card-source").val(),
        body: this.$(".card-body").val(),
        page: this.$(".card-page").val()
      });
    };

    return CardView;

  })(Backbone.View);

  AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = $("body");

    AppView.prototype.events = {
      "click #btn-add": "addCard",
      "click #btn-save": "saveCard",
      "click #btn-prev": "previousCard",
      "click #btn-next": "nextCard"
    };

    AppView.prototype.initialize = function() {
      this.cards = new CardCollection;
      this.card_view = new CardView;
      this.cards.fetch();
      if (this.cards.length > 0) {
        return this.loadCard(this.cards.last());
      }
    };

    AppView.prototype.previousCard = function() {
      var current;
      current = this.cards.indexOf(this.card_view.model);
      return this.loadCard(this.cards.at(current - 1));
    };

    AppView.prototype.nextCard = function() {
      var current;
      current = this.cards.indexOf(this.card_view.model);
      return this.loadCard(this.cards.at(current + 1));
    };

    AppView.prototype.loadCard = function(model) {
      console.log("Loading card");
      this.card_view.use(model);
      return this.updateCount();
    };

    AppView.prototype.addCard = function() {
      console.log("Adding card");
      return this.loadCard(this.cards.create());
    };

    AppView.prototype.saveCard = function() {
      console.log("Saving card");
      return this.card_view.save();
    };

    AppView.prototype.updateCount = function() {
      var current, total;
      current = this.cards.indexOf(this.card_view.model) + 1;
      total = this.cards.length;
      $("#count").text("Card " + current + "/" + total);
      if (current === total) {
        $("#btn-next").addClass("arrow-disabled");
      } else {
        $("#btn-next").removeClass("arrow-disabled");
      }
      if (current === 1) {
        return $("#btn-prev").addClass("arrow-disabled");
      } else {
        return $("#btn-prev").removeClass("arrow-disabled");
      }
    };

    return AppView;

  })(Backbone.View);

  window.app = new AppView;

}).call(this);
